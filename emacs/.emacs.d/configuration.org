#+TITLE: Will's Emacs Configuration
#+AUTHOR: Will Ellwood

#+BEGIN_SRC emacs-lisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Will Ellwood")
(setq user-mail-address "fragmad@gmail.com")
#+END_SRC

* Package Management

#+BEGIN_SRC emacs-lisp
  (load "package")
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives
                '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  ;;(add-to-list 'package-archives
  ;;             '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

* Set up Use Package

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(setq my-theme 'dracula)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
:ensure t)
(load-theme my-theme t)
#+END_SRC

* Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
   :ensure t
   :config (powerline-center-theme))
#+END_SRC

* Sane Defaults

** Interface

*** Turn off UI elements

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode 0)
(tool-bar-mode 0)
#+END_SRC

*** Say y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Line Numbers 

#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(setq linum-format " %4d ")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

*** Show line and column in the mode-line

#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC

*** Reduce startup screen noise

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+END_SRC

* Initalization

** Store all backkup and autosave files in the tmp dir

#+BEGIN_SRC emacs-lisp
;(defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
;(setq backup-directory-alist
;    `((".*" . ,emacs-tmp-dir)))
;(setq auto-save-file-name-transforms
;    `((".*" ,emacs-tmp-dir t)))
;(setq auto-save-list-file-prefix
;    emacs-tmp-dir)
#+END_SRC

* Editing

** Enabled auto pairs

#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

** Enable visual-line-mode for word wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Standard indentation & no tabs

#+BEGIN_SRC emacs-lisp
(setq standard-indent 2)
(setq-default indent-tabs-mode nil)
#+END_SRC


** Drag stuff up and down

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t)
(drag-stuff-global-mode 1)
(global-set-key (kbd "M-k") 'drag-stuff-up)
(global-set-key (kbd "M-j") 'drag-stuff-down)
#+END_SRC

** Highlight matching parens with zero delay

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Spellchecking

 I basically can't spell.

 Use flycheck in text buffers.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'markdown-mode-hook #'flycheck-mode)
   (add-hook 'text-mode-hook #'flycheck-mode)
   (add-hook 'org-mode-hook #'flycheck-mode)
   (add-hook 'erc-mode-hook #'flycheck-mode)


   (global-set-key (kbd "C-c C-s") 'ispell-word)
 #+END_SRC
** Remove Trailing Whitespace

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Evil Mode

** Reset some defaults

** Restore default tab functionality in org-mode

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

** Initialize Evil mode and friends

#+BEGIN_SRC emacs-lisp

(use-package evil
:ensure  t
:init
(setq evil-vsplit-window-right t)
 :config)
(evil-mode 1)
#+END_SRC

** Leader

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
:ensure t
:config
(global-evil-leader-mode))
#+END_SRC

** Surrond mode

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
:ensure t
:config
(global-evil-surround-mode))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(use-package evil-org
:ensure t
:after org
:config
(add-hook 'org-mode-hook 'evil-org-mode)
(add-hook 'evil-org-mode-hook
(lambda () (evil-org-set-key-theme))))
#+END_SRC

** TODO Evil Leader keybindings

 #+BEGIN_SRC emacs-lisp
 (evil-leader/set-leader "<SPC>")
 (evil-leader/set-key
   "a" 'ace-jump-mode
   "f" 'helm-projectile-find-file
   "F" 'helm-projectile-ag
   "q" 'evil-quit
   "w" 'save-buffer
   "t" 'neotree-toggle
   "e" 'emojify-insert-emoji
   "g" 'magit)
 #+END_SRC

** Evil Leader org keybindings

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'org-mode
  "A" 'org-archive-subtree
  "a" 'org-agenda
  "c" 'org-capture
  "d" 'org-deadline
  "l" 'evil-org-open-links
  "s" 'org-schedule
  "t" 'org-todo)
#+END_SRC

** Cursor changer
#+BEGIN_SRC emacs-lisp
;(use-package evil-terminal-cursor-changer
;:ensure t
;:init
;(setq evil-motion-state-cursor 'box)  ; █
;(setq evil-visual-state-cursor 'box)  ; █
;(setq evil-normal-state-cursor 'box)  ; █
;(setq evil-insert-state-cursor 'bar)  ; ⎸
;(setq evil-emacs-state-cursor  'hbar) ; _
;:config
;(evil-terminal-cursor-changer-activate))
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Task Management
 #+BEGIN_SRC emacs-lisp

   (setq org-directory "~/ownCloud/org")

   (defun org-file-path (filename)
     "Return the absolute address of an org file, given its relative name."
     (concat (file-name-as-directory org-directory) filename))

   (setq org-index-file (org-file-path "index.org"))
   (setq org-scrapbook-file (org-file-path "scrapbook.org"))

   (setq org-archive-location
         (concat (org-file-path "archive.org") "::* From %s"))
 #+END_SRC

 I store all my todos in =~/ownCloud/org/index.org=, so I'd like to derive my agenda from
 there.

 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list org-index-file))
 #+END_SRC

** Keywords for TODOs

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p)" "NEXT(n)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)")))
#+END_SRC

** Colour TODO keywords

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
 '(("WAITING" . "green") ("CANCELED" . "darkred") ("NEXT" . "orange")))
#+END_SRC
** Exporting
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-reveal)
  (require 'ox-md)
  (require 'ox-beamer)
  ;; (require 'ox-reveal)
#+END_SRC

I'd like to be able to have slightly more modern looking articles printed in \LaTeX.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

** Keys 


 #+BEGIN_SRC emacs-lisp
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (define-key global-map "\C-cc" 'org-capture)
 #+END_SRC

 Hit =C-c i= to quickly open up my todo list.

 #+BEGIN_SRC emacs-lisp
   (defun open-index-file ()
     "Open the master org TODO list."
     (interactive)
     (find-file org-index-file)
     (flycheck-mode -1)
     (end-of-buffer))

   (global-set-key (kbd "C-c i") 'open-index-file)
 #+END_SRC

 Hit =M-n= to quickly open up a capture template for a new todo.

 #+BEGIN_SRC emacs-lisp
   (defun org-capture-todo ()
     (interactive)
     (org-capture :keys "t"))

   (global-set-key (kbd "M-n") 'org-capture-todo)
 #+END_SRC

* Markdown Mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Helm & Projectile

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config (helm-mode t))
(use-package projectile
  :ensure projectile
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t))
(use-package helm-projectile
  :ensure t)
(use-package helm-ag
  :ensure t)


   (setq helm-autoresize-max-height 0)
   (setq helm-autoresize-min-height 20)
   (helm-autoresize-mode 1)

   (setq helm-buffers-fuzzy-matching t
         helm-recentf-fuzzy-match    t
         helm-m-x-fuzzy-match        t)

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

* Auto-complete

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode t)
  (setq company-global-modes '(not org-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key company-mode-map (kbd "TAB") 'company-complete)
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
    (add-hook 'web-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'rust-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'php-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'python-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC

* Evil-magit

#+BEGIN_SRC emacs-lisp
(use-package evil-magit :ensure t)
#+END_SRC

* Language-specific

** Web languages
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init
    (setq web-mode-content-types-alist '(("jsx" . "\\.tsx\\'")))
    (setq web-mode-content-types-alist '(("jsx" . "\\.js\\'")))
  :config
    (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :ensure t)
(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC

** Yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode :ensure t)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
(use-package python-mode :ensure t)
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
(use-package php-mode :ensure t)
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode :ensure t)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
(setq flycheck-indication-mode nil)
(setq flycheck-display-errors-delay nil)
(setq flycheck-idle-change-delay 2)
(global-flycheck-mode))
#+END_SRC
* Useful Functions

expand-region.el is an incredibly useful package. Let's use it!

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

acejump-mode also looks really good. Let's start using it.

#+BEGIN_SRC emacs-lisp
(require 'ace-jump-mode)
;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map [f6] 'ace-jump-mode)
(define-key global-map (kbd "C-c C-SPC") 'ace-jump-mode)
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC
