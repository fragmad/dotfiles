#+TITLE: Will's Emacs Configuration
#+AUTHOR: Will Ellwood

#+BEGIN_SRC emacs-lisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Will Ellwood")
(setq user-mail-address "fragmad@gmail.com")
#+END_SRC

* Package Management

#+BEGIN_SRC emacs-lisp
  (load "package")
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives
                '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  ;;(add-to-list 'package-archives
  ;;             '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

* Set up Use Package

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC
* Useful Functions

Better defaults

#+BEGIN_SRC emacs-lisp
  (require 'better-defaults)
#+END_SRC

expand-region.el is an incredibly useful package. Let's use it!

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

acejump-mode also looks really good. Let's start using it.

#+BEGIN_SRC emacs-lisp
(require 'ace-jump-mode)
;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map [f6] 'ace-jump-mode)
(define-key global-map (kbd "C-c C-SPC") 'ace-jump-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC

This is happily taken from Harry Schwartz Emacs configuration file.

#+BEGIN_SRC emacs-lisp
(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
(setq my-theme 'badwolf)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
:ensure t)
(use-package monokai-theme
:ensure t)
(use-package badwolf-theme
:ensure t)

(load-theme my-theme t)
#+END_SRC

* Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
   :ensure t
   :config (powerline-center-theme))
#+END_SRC

* Sane Defaults

#+BEGIN_SRC emacs-lisp
'(shell-file-name "/bin/bash")
#+END_SRC
* Interface

** Turn off UI elements

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode 0)
(tool-bar-mode 0)
#+END_SRC

** Say y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Line Numbers

#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(setq linum-format " %4d ")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** Show line and column in the mode-line

#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC

** Reduce startup screen noise

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+END_SRC

** Set default font

#+BEGIN_SRC emacs-lisp
 (set-frame-font "Inconsolata 14" nil t)

  ;; (Add-to-list 'default-frame-alist '(font . wme/default-font))
  ;; (set-face-attribute 'default t :font wme/default-font)

  ;; (set-face-attribute 'default nil :font wme/default-font)
  ;; (set-frame-font wme/default-font nil t)

#+END_SRC
** Hide certain modes from the modeline

I really don't need to know all of the minor modes that are running.

#+BEGIN_SRC emacs-lisp

(use-package diminish)

(defmacro diminish-minor-mode (filename mode &optional abbrev)
  `(eval-after-load (symbol-name ,filename)
     '(diminish ,mode ,abbrev)))

(defmacro diminish-major-mode (mode-hook abbrev)
  `(add-hook ,mode-hook
             (lambda () (setq mode-name ,abbrev))))

(diminish-minor-mode 'abbrev 'abbrev-mode)
(diminish-minor-mode 'simple 'auto-fill-function)
(diminish-minor-mode 'company 'company-mode)
(diminish-minor-mode 'eldoc 'eldoc-mode)
(diminish-minor-mode 'flycheck 'flycheck-mode)
(diminish-minor-mode 'flyspell 'flyspell-mode)
(diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
(diminish-minor-mode 'org-indent 'org-indent-mode)
(diminish-minor-mode 'projectile 'projectile-mode)
(diminish-minor-mode 'ruby-end 'ruby-end-mode)
(diminish-minor-mode 'subword 'subword-mode)
(diminish-minor-mode 'undo-tree 'undo-tree-mode)
(diminish-minor-mode 'yard-mode 'yard-mode)
(diminish-minor-mode 'yasnippet 'yas-minor-mode)
(diminish-minor-mode 'wrap-region 'wrap-region-mode)
(diminish-minor-mode 'Helm 'helm-mode)
#+END_SRC


* Initialisation

** Store all backkup and autosave files in the tmp dir

#+BEGIN_SRC emacs-lisp
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq backup-directory-alist
      `((".*" . ,emacs-tmp-dir)))
  (setq auto-save-file-name-transforms
      `((".*" ,emacs-tmp-dir t)))
  (setq auto-save-list-file-prefix
      emacs-tmp-dir)
#+END_SRC

* Editing

** Enabled auto pairs

#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

** Enable visual-line-mode for word wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Standard indentation & no tabs

#+BEGIN_SRC emacs-lisp
(setq standard-indent 2)
(setq-default indent-tabs-mode nil)
#+END_SRC

** Drag stuff up and down

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t)
(drag-stuff-global-mode 1)
(global-set-key (kbd "M-k") 'drag-stuff-up)
(global-set-key (kbd "M-j") 'drag-stuff-down)
#+END_SRC

** Highlight matching parens with zero delay

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Spellchecking

 I basically can't spell.

 Use flycheck in text buffers.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'markdown-mode-hook #'flycheck-mode)
   (add-hook 'text-mode-hook #'flycheck-mode)
   (add-hook 'org-mode-hook #'flycheck-mode)
   (add-hook 'erc-mode-hook #'flycheck-mode)


   (global-set-key (kbd "C-c C-s") 'ispell-word)
 #+END_SRC
** Remove Trailing Whitespace

This is irritating in many files as tailing whitespace is sometimes useful.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Always Intent With Spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

* Evil Mode

** Reset some defaults

** Restore default tab functionality in org-mode

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

** Initialize Evil mode and friends

#+BEGIN_SRC emacs-lisp

(use-package evil
:ensure  t
:init
(setq evil-vsplit-window-right t)
 :config)
(evil-mode 1)
#+END_SRC

** Leader

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
:ensure t
:config
(global-evil-leader-mode))
#+END_SRC

** Surrond mode

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
:ensure t
:config
(global-evil-surround-mode))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(use-package evil-org
:ensure t
:after org
:config
(add-hook 'org-mode-hook 'evil-org-mode)
(add-hook 'evil-org-mode-hook
(lambda () (evil-org-set-key-theme))))
#+END_SRC

** Evil Leader keybindings

 #+BEGIN_SRC emacs-lisp
 (evil-leader/set-leader "<SPC>")
 (evil-leader/set-key
   "a" 'ace-jump-mode
   "f" 'helm-projectile-find-file
   "F" 'helm-projectile-ag
   "q" 'evil-quit
   "w" 'save-buffer
   "t" 'neotree-toggle
   "e" 'emojify-insert-emoji
   "r" 'elfeed
   "g" 'magit)
 #+END_SRC

** Evil Leader org keybindings

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'org-mode
  "A" 'org-archive-subtree
  "a" 'org-agenda
  "c" 'org-capture
  "d" 'org-deadline
  "l" 'evil-org-open-links
  "s" 'org-schedule
  "t" 'org-todo)
#+END_SRC

** Cursor changer
#+BEGIN_SRC emacs-lisp
;(use-package evil-terminal-cursor-changer
;:ensure t
;:init
;(setq evil-motion-state-cursor 'box)  ; █
;(setq evil-visual-state-cursor 'box)  ; █
;(setq evil-normal-state-cursor 'box)  ; █
;(setq evil-insert-state-cursor 'bar)  ; ⎸
;(setq evil-emacs-state-cursor  'hbar) ; _
;:config
;(evil-terminal-cursor-changer-activate))
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Display preferences

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

When editing code, use the current window.

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Task Management
 #+BEGIN_SRC emacs-lisp

   (setq org-directory "~/ownCloud/org")

   (defun org-file-path (filename)
     "Return the absolute address of an org file, given its relative name."
     (concat (file-name-as-directory org-directory) filename))

   (setq org-scrapbook-file (org-file-path "scrapbook.org"))
   (setq org-food-file (org-file-path "food.org"))


   ;; Special Projects With Their Own Codenames
   (setq org-electrode-project (org-file-path "./projects/electrode_todo.org"))

   (setq org-archive-location
         (concat (org-file-path "archive.org") "::* From %s"))

   ;; GTD files
   (setq org-inbox (org-file-path "index.org"))
   (setq org-gtd (org-file-path "gtd.org"))
   (setq org-tickler (org-file-path "tickler.org"))
   (setq org-someday (org-file-path "someday.org"))
   (setq org-standup (org-file-path "dailystandup.org"))

 #+END_SRC

 I store all my todos in =~/ownCloud/org/index.org=, so I'd like to derive my agenda from
 there, but also from the project specific files stored in =./projects/=

 #+BEGIN_SRC emacs-lisp
;   (setq org-agenda-files (list org-index-file org-electrode-project))
   (setq org-agenda-files (list org-inbox org-gtd org-tickler))

 #+END_SRC

** Capturing Tasks / Notes

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("s" "Standup" entry
                                (file+headline org-standup "The Daily Stand Up")
                                 "* Standup - %T - %?\n- What Did I Do Yesterday?\n- What Am Doing Today?\n- What is my Daily Hit?\n- What Are My Blockers?\n- What Was the Most Interesting Thing I Learned Yesterday?")
                                ("t" "Todo [inbox]" entry
                                 (file+headline org-inbox "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline org-tickler "Tickler")
                                 "* TODO %i%? \n SCHEDULED: %T")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/ownCloud/org/gtd.org" :maxlevel . 3)
                             ("~/ownCloud/org/someday.org" :level . 1)
                             ("~/ownCloud/org/tickler.org" :maxlevel . 2)))
#+END_SRC
** Keywords for to-do Items

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p)" "NEXT(n)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)")))
#+END_SRC

** Colour TODO keywords

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
 '(("WAITING" . "green") ("CANCELED" . "darkred") ("NEXT" . "orange")))
#+END_SRC
** Exporting
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-reveal)
  (require 'ox-md)
  (require 'ox-beamer)
  ;; (require 'ox-reveal)
#+END_SRC

I'd like to be able to have slightly more modern looking articles printed in \LaTeX.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

** Custom Agendas

To select these use "C-c a".

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("o" "At the office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))
          ;; (("w" "Writing Tasks" tags-todo "@writing"
          ;;  ((org-agenda-overriding-header "Writing")
          ;;   (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+END_SRC

** Keys


 #+BEGIN_SRC emacs-lisp
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (define-key global-map "\C-cc" 'org-capture)
 #+END_SRC

 Hit =C-c i= to quickly open up my todo list.

 #+BEGIN_SRC emacs-lisp
   (defun wme/open-index-file ()
     "Open the master org TODO list."
     (interactive)
     (find-file org-inbox)
     (flycheck-mode -1)
     (end-of-buffer))

   (global-set-key (kbd "C-c i") 'wme/open-index-file)
 #+END_SRC

hit =C-c s= to quickly open my daily stand up file.

#+BEGIN_SRC emacs-lisp
   (defun wme/open-standup-file ()
     "Open my stand up file."
     (interactive)
     (find-file org-standup)
     (flycheck-mode -1)
     (end-of-buffer))

   (global-set-key (kbd "C-c s") 'wme/open-standup-file)
#+END_SRC
 Hit =M-n= to quickly open up a capture template for a new todo.

 #+BEGIN_SRC emacs-lisp
   (defun org-capture-todo ()
     (interactive)
     (org-capture :keys "t"))

   (global-set-key (kbd "M-n") 'org-capture-todo)
 #+END_SRC

* Markdown Mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

* Helm & Projectile

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config (helm-mode t))
(use-package projectile
  :ensure projectile
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t))
(use-package helm-projectile
  :ensure t)
(use-package helm-ag
  :ensure t)


   (setq helm-autoresize-max-height 0)
   (setq helm-autoresize-min-height 20)
   (helm-autoresize-mode 1)

   (setq helm-buffers-fuzzy-matching t
         helm-recentf-fuzzy-match    t
         helm-m-x-fuzzy-match        t)

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

* Auto-complete

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode t)
  (setq company-global-modes '(not org-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (defun indent-or-complete ()
  ;;   (interactive)
  ;;   (if (looking-at "\\_>")
  ;;       (company-complete-common)
  ;;     (indent-according-to-mode)))
   (define-key company-mode-map (kbd "M-/") 'company-complete)
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
    (add-hook 'web-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'rust-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'php-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'python-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC

* Evil-magit

#+BEGIN_SRC emacs-lisp
(use-package evil-magit :ensure t)
#+END_SRC

* Language-specific

** Fly check

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init)
  ;; (setq flycheck-indication-mode nil)
  ;; (setq flycheck-display-errors-delay nil)
  ;; (setq flycheck-idle-change-delay 2)
  ;; (global-flycheck-mode))
#+END_SRC

** Web languages
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init
    (setq web-mode-content-types-alist '(("jsx" . "\\.tsx\\'")))
    (setq web-mode-content-types-alist '(("jsx" . "\\.js\\'")))
  :config
    (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :ensure t)
(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC

** Yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
#+END_SRC

** Golang

Ensure that go-mode is installed

#+BEGIN_SRC emacs-lisp
(use-package go-mode
:ensure t)
(use-package company-go
:ensure t)
#+END_SRC

Run =gofmt= before save.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

When opening a Go file,

- Start up =company-mode with the Go abckend.
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode)
              (if (not (string-match "go" compile-command))
                  (setq explicit-shell-file-name "/bin/bash")
                  (set (make-local-variable 'compile-command)
                       "go build -v && go test -v && go vet"))
              (flycheck-mode)))
#+END_SRC


** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode :ensure t)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (hrs/append-to-path "~/.local/bin")

  ;; (use-package elpy
  ;; :ensure t)

  ;; (use-package jedi
  ;; :ensure t)

  ;; (elpy-enable)

  ;; (add-hook 'elpy-mode-hook 'flycheck-mode)

  ;; (use-package py-autopep8
  ;; :ensure t)
  ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

  ;; (add-to-list 'company-backends 'company-jedi)
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot t)

  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (use-package elpy
    :ensure t)

  (elpy-enable)

  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
(use-package php-mode :ensure t)
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode :ensure t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Writing Mode

These settings mimic iA Writer and we found in this blog post: https://azer.bike/journal/ia-writer-mode-for-emacs/

#+BEGIN_SRC emacs-lisp
(defun writing-mode ()
  (interactive)
  (setq buffer-face-mode-face '(:family "dejavu sans mono" :height 150))
  (buffer-face-mode)
  (linum-mode 0)
  (writeroom-mode 1)
  (blink-cursor-mode)
  (flyspell-mode 1)
  (visual-line-mode 1)
  (electric-pair-mode 0)
  (setq truncate-lines nil)
  (setq-default line-spacing 5)
  (setq global-hl-line-mode nil))
#+END_SRC

* RSS Feeds

I'm trying out elfeed, so let's add some feeds.

#+BEGIN_SRC emacs-lisp
;;  (use-package elfeed :ensure t)
  ;; (use-package elfeed-org :ensure t)

#+END_SRC

Just some basic feeds for me to start following.
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
  '("http://will-ellwood.com/index.xml"
    "https://jvns.ca/atom.xml"
    "https://harryrschwartz.com/atom.xml"))
#+END_SRC

And let's make it play nicely with =evil-mode=

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
;;(add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)

;;(evil-define-key* 'motion elfeed-search-mode-map
;                  "gb" #'elfeed-search-browse-url
;                  "gr" #'elfeed-search-update--force
;                  "gR" #'elfeed-search-fetch)
;
;(evil-define-key* 'motion elfeed-show-mode-map
;                  "gb" #'elfeed-show-visit
;                  "gj" #'elfeed-show-next
;                  "gk" #'elfeed-show-prev)
#+END_SRC
* Dashboard

#+BEGIN_SRC emacs-lisp
    (defun wme/dashboard ()
      (interactive)
      (delete-other-windows)
      (wme/open-index-file)
      (split-window-right)
      (wme/open-standup-file))

  (global-set-key (kbd "C-c d") 'wme/dashboard)

#+END_SRC

The dashboard should load on start.
#+BEGIN_SRC
(wme/dashboard)
#+END_SRC
