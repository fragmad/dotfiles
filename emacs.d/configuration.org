#+TITLE: Emacs Configuration

My emacs configuration. I expect this to grow over time and it is very much a work in progress. Many of the ideas from this are taken shameless from  Harry Schwartz's configuration which can be found [[https://github.com/hrs/dotfiles][at this github dotfiles.]]

* Start Things
** Always start server mode

Always start Emacs as a server so tools can latch on to it easily. :)

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

** Set the Garbage Collection Threshold

If this is too high then Emacs is not very responsive when it finally decided to garbage collect. I fit is too low then Emacs is slow.

Spacemacs uses this setting. It works.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000) ; 100MB
#+END_SRC

* Circumvent stupid DNS servers

My ISP are bastards and don't let DNS fail properly.

#+BEGIN_SRC emacs-lisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
;  (load-file "~/Personal/code/sensible-defaults.el/sensible-defaults.el")
;  (sensible-defaults/use-all-settings)
;  (sensible-defaults/use-all-keybindings)
#+END_SRC

* Package Management

Use cask and pallet for managing packages.

#+BEGIN_SRC emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
(require 'pallet)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "William Ellwood"
user-mail-address "fragmad@gmail.com")
#+END_SRC

* Add =resources= to =load-path=

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

* =evil-mode=

I want to start using evil more. Make it easy for me to change my mind.

#+BEGIN_SRC emacs-lisp
(evil-mode 1)
#+END_SRC

Enable =surround= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-evil-surround-mode 1)
#+END_SRC

Disable Evil Mode in Some Modes

#+BEGIN_SRC emacs-lisp
  (dolist (mode '(ag-mode
                  erc-modes
                  flycheck-error-list-mode
                  git-rebase-mode))
    (add-to-list 'evil-emacs-state-modes mode))
#+END_SRC

My biggest problem with modal editing is that I'm a dope and forget to switch back into normal mode. This function aims to automate that.

Snippit taken from here: [[https://emacs.stackexchange.com/questions/24563/evil-mode-switch-back-to-normal-mode-automatically-after-inaction][evil mode: switch back to normal mode automatically after inaction (Stack Overflow) ]]

#+BEGIN_SRC emacs-lisp
(defun evil-normalize-all-buffers ()
  "Force a drop to normal state."
  (unless (eq evil-state 'normal)
    (dolist (buffer (buffer-list))
      (set-buffer buffer)
      (unless (or (minibufferp)
                  (eq evil-state 'emacs))
        (evil-force-normal-state)))
    (message "Dropped back to normal state in all buffers")))

(defvar evil-normal-timer
  (run-with-idle-timer 10 t #'evil-normalize-all-buffers)
  "Drop back to normal state after idle for 10 seconds.")

(add-hook 'evil-mode-hook 'evil-normal-timer)

#+END_SRC


* Utility Functions

expand-region.el is an incredibly useful package. Let's use it!

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

acejump-mode also looks really good. Let's start using it.

#+BEGIN_SRC emacs-lisp
(require 'ace-jump-mode)
;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map [f6] 'ace-jump-mode)
#+END_SRC
* UI Preferences
** Startup
Disable the splash screen and give me some snark.
The information was taken from [[https://stackoverflow.com/questions/744672/unable-to-hide-welcome-screen-in-emacs][this Stack Overflow page.]] In the future I might want to do something really radical like provide my own dashboard. That's a project to save for another day.
>>>>>>> 931d2a58bb4a51bc843215318ba302413ae97921

#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message ";; happy hacking")
#+end_src

kill all of the window decoration.

#+begin_src emacs-lisp
(set-frame-parameter nil 'fullscreen 'fullboth)
#+end_src

** disable window decorations

#+begin_src emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
(scroll-bar-mode -1))
#+end_src

<<<<<<< HEAD
** Set the theme
A smorgasbord of themes to choose from.

#+begin_src emacs-lisp
;(load-theme 'cyberpunk t)
(load-theme 'solarized-dark t)
;(load-theme 'solarized-light t)
;(load-theme 'zenburn t)
#+end_src

** set the font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Hack" ))
(set-face-attribute 'default t :font "Hack" )
#+end_src

** Enable Smart Mode Line

i'm trying out smart mode line.

i'd like to use the powerline theme. other themes are available. :)

#+begin_src emacs-lisp
(setq sml/no-confirm-load-theme t)
(setq sml/theme 'powerline)
(sml/setup)
#+end_src

** highlight the current line

this makes it easier to find the cursor

#+begin_src emacs-lisp
(when window-system
(global-hl-line-mode))
#+end_src

** nyan mode
start nyan-mode. :)

#+begin_src emacs-lisp
(nyan-mode 1)
#+end_src

** wind move keys
wind move keys are useful in theory. (actually not. disabled for now.)

#+begin_src emacs-lisp
;(when (fboundp 'windmove-default-keybindings)
;  (windmove-default-keybindings))
#+end_src

provide support for terminals.

#+begin_src emacs-lisp
;(global-set-key (kbd "C-c <left>")  'windmove-left)
;(global-set-key (kbd "C-c <right>") 'windmove-right)
;(global-set-key (kbd "C-c <up>")    'windmove-up)
;(global-set-key (kbd "C-c <down>")  'windmove-down)
#+end_src

** highlight uncommitted changes
#+begin_src emacs-lisp
;(require 'diff-hl)
;(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
;(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+end_src

** mac os x specifics

first we need to know if we are using a mac

#+begin_src emacs-lisp
  (defun fragmad/system-is-mac()
    (interactive)
    (string-equal system-type "darwin"))
#+end_src

i like to be able to use the command key as a meta key when using my macbook air.

#+begin_src emacs-lisp
  (if (fragmad/system-is-mac)
       (setq ns-command-modifier 'meta)
       (setq ns-right-alternative-modifier (quote none)))
#+end_src

* Helm


This package makes finding files easier and includes a nice feature called helm-sematic which parses source code files for things like classes and functions. very nice. i've taken the extended configuration from [[https://tuhdo.github.io/helm-intro.html][this introduction]] as my initial start and will likely extend it.

#+begin_src emacs-lisp
  (require 'helm)
  (require 'helm-config)

  ;; the default "c-x c" is quite close to "c-x c-c", which quits emacs.
  ;; changed to "c-c h". note: we must set "c-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make tab work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using c-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using m-<next>/m-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)

  (defun spacemacs//helm-hide-minibuffer-maybe ()
    "hide minibuffer in helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))


  (add-hook 'helm-minibuffer-set-up-hook
            'spacemacs//helm-hide-minibuffer-maybe)

  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)

  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t
        helm-m-x-fuzzy-match        t)

  (global-set-key (kbd "C-x c-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-x") 'helm-M-x)

  (semantic-mode 1)
  (helm-mode 1)
#+end_src

* Programming Languages

I like everything indented by four spaces by default.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

Treat CamelCase symbols as separate words to make editing easier.

#+BEGIN_SRC emacs-lisp
;(global-subword-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-column 80)
(setq fci-rule-wdith 2)
(fci-mode)

#+END_SRC

** Lisps
(this is all taken for HRS's configuration for later work)

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit-mode= to balance parentheses (and
more!), =rainbow-delimiters= to color matching parentheses, and highlighting the
whole expression when point is on a paren.

#+BEGIN_SRC emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (paredit-mode)
                     (rainbow-delimiters-mode)
                     (linum-mode))))
#+END_SRC

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
;  (setq python-indent 4)
;  (add-hook 'python-mode-hook (lambda () (elpy-enable)))
  (add-hook 'python-mode-hook (lambda () (anaconda-mode)))
  (add-hook 'python-mode-hook 'jedi:setup)
 (setq jedi:complete-on-dot t)
  (add-hook 'python-mode-hook 'linum-mode)
  (add-hook 'paraedit-mode t)
  (add-hook 'python-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'python-mode-hook #'global-flycheck-mode)
  (add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))
 #+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-hook 'js2-mode-hook 'ac-js2-mode)

  (setq js2-highlight-level 3)


  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (eval-after-load 'tern
    '(progn
       (require 'tern-auto-complete)
       (tern-ac-setup)))
 #+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC

Enable spell checking.

#+BEGIN_SRC emacs-lisp
(add-hook 'git-commit-mode-hook 'turn-on-flyspell)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
;; (setq helm-projectile-fuzzy-match nil)
(require 'helm-projectile)
(projectile-mode)
(helm-projectile-on)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun hrs/search-project-for-symbol-at-point ()
  "Use `projectile-ag' to search the current project for `symbol-at-point'."
  (interactive)
  (projectile-ag (projectile-symbol-at-point)))

(global-set-key (kbd "C-c v") 'projectile-ag)
(global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)
#+END_SRC

** Cucumber

#+BEGIN_SRC emacs-lisp
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
#+END_SRC

* Terminal

 =multi-term= works well for managing shell sessions.

 It's a good idea to stick with whatever login shell I've got going on.

 #+BEGIN_SRC emacs-lisp
 (setq multi-term-program-switches "--login")
 #+END_SRC

 Evil is really pointless in the terminal. Disable it.

 #+BEGIN_SRC emacs-lisp
   (evil-set-initial-state 'term-mode 'emacs)
 #+END_SRC

* Org-mode

 If editing source blocks put syntax highlighting on.

 #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
 #+END_SRC

 Make tab behave if it was in the languages major mode.

 #+BEGIN_SRC emacs-lisp
 (setq org-src-tab-acts-natively t)
 #+END_SRC

** Task Management
 #+BEGIN_SRC emacs-lisp

 (setq org-directory "~/Dropbox/org")

 (defun org-file-path (filename)
   "Return the absolute address of an org file, given its relative name."
   (concat (file-name-as-directory org-directory) filename))

 (setq org-index-file (org-file-path "index.org"))
 (setq org-scrapbook-file (org-file-path "scrapbook.org"))

 (setq org-archive-location
       (concat (org-file-path "archive.org") "::* From %s"))
 #+END_SRC

 #+RESULTS:
 : ~/Dropbox/org/archive.org::* From %s


 I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from
 there.

 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list org-index-file))
 #+END_SRC

 Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
 place in the archive.

 #+BEGIN_SRC emacs-lisp
   (defun mark-done-and-archive ()
     "Mark the state of an org-mode item as DONE and archive it."
     (interactive)
     (org-todo 'done)
     (org-archive-subtree))

   (define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)
 #+END_SRC

 Record the time that a todo was archived.

 #+BEGIN_SRC emacs-lisp
   (setq org-log-done 'time)
 #+END_SRC

** Capturing tasks

 Define a few common tasks as capture templates. Specifically, I frequently:

 - Record ideas for future blog posts in =~/org/blog-ideas.org=,
 - Keep a running grocery list in =~/org/groceries.org=, and
 - Maintain a todo list in =~/org/index.org=.

 #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates
         '(("t" "Todo"  entry (file org-index-file)
            "* TODO %?\n")
            ("s" "Scrapbook"  entry  (file org-scrapbook-file)
            "* Entry %U ")
            ("g" "Groceries"
               checkitem
            (file (org-file-path "groceries.org")))))
 #+END_SRC

 When I'm starting an org capture template I'd like to begin in insert mode. I'm  opening it up in order to start typing something, so this skips a step.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'org-capture-mode-hook 'evil-insert-state)
 #+END_SRC

** Keybindings

 Bind a few handy keys.

 #+BEGIN_SRC emacs-lisp
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (define-key global-map "\C-cc" 'org-capture)
 #+END_SRC

 Hit =C-c i= to quickly open up my todo list.

 #+BEGIN_SRC emacs-lisp
   (defun open-index-file ()
     "Open the master org TODO list."
     (interactive)
     (find-file org-index-file)
     (flycheck-mode -1)
     (end-of-buffer))

   (global-set-key (kbd "C-c i") 'open-index-file)
 #+END_SRC

 Hit =M-n= to quickly open up a capture template for a new todo.

 #+BEGIN_SRC emacs-lisp
   (defun org-capture-todo ()
     (interactive)
     (org-capture :keys "t"))

   (global-set-key (kbd "M-n") 'org-capture-todo)
 #+END_SRC


** Exporting

#+BEGIN_SRC emacs-lisp

;(require 'ox-md)
;(require 'ox-beamer)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)))
#+END_SRC

 *** Exporting to HTML

 Don't include the footer with my details.

 #+BEGIN_SRC emacs-lisp
   (setq org-html-postamble nil)
 #+END_SRC


 * =dired=

 Nothing here yet.

* ERC

I am experimenting with using IRC as a composition tool. The logs need to be saved somewhere.

#+BEGIN_SRC emacs-lisp
(erc-log-mode)
(setq erc-log-channels-directory "~/Dropbox/Writing/Irssi_Logs/")
(setq erc-generate-log-file-name-function (quote erc-generate-log-file-name-with-date))
(setq erc-save-buffer-on-part nil)
(setq erc-save-queries-on-quit nil)
(setq erc-log-write-after-insert t)
(setq erc-log-write-after-send t)
#+END_SRC

* Editing

** Always use spaces

 Tabs are awful.

 #+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode nil)
 #+END_SRC

** Spellchecking

 I basically can't spell.

 Use flycheck in text buffers.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'markdown-mode-hook #'flycheck-mode)
   (add-hook 'text-mode-hook #'flycheck-mode)
   (add-hook 'org-mode-hook #'flycheck-mode)
   (add-hook 'erc-mode-hook #'flycheck-mode)
 #+END_SRC

** Configure ido

 #+BEGIN_SRC emacs-lisp

   (setq ido-enable-flex-matching t)
   (setq ido-everywhere t)
  (ido-mode 1)
   (ido-ubiquitous)
   (flx-ido-mode 1) ; better/faster matching
   (setq ido-create-new-buffer 'always) ; don't confirm to create new buffers
 #+END_SRC

** Use Smex to handle M-x with ido

Let's try using helm.

 #+BEGIN_SRC emacs-lisp
; (smex-initialize)

; (global-set-key (kbd "M-x") 'smex)
; (global-set-key (kbd "M-X") 'smex-major-mode-commands)
 #+END_SRC

** Word wrapping

I want that has visual line mode enabled to stop at 80 characters. This is important to me as it helps me process text much more easily. Use this in markdown-mode and text-mode. Anywhere else I'm likely to be writing code so should enable this manually.

#+BEGIN_SRC emacs-lisp
;(global-visual-fill-column-mode)
#+END_SRC

Certain modes require visual-line-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook (lambda () (visual-line-mode t)))
  (add-hook 'text-mode-hook (lambda () (visual-line-mode t)))
#+END_SRC

** Backups

It's a pain having backups litter working directories. Put them in ~/tmp for sanity.

#+BEGIN_SRC emacs-lisp
;; backup in one place. flat, no tree structure
(setq backup-directory-alist '(("" . "~/tmp/emacs-backups")))
#+END_SRC

** Remove Trailing Whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Some custom keybindings

These are useful functions. :)
#+BEGIN_SRC emacs-lisp
(defun fragmad/move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun fragmad/move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
#+END_SRC

#+RESULTS:
: fragmad/move-line-down

 #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
      (global-set-key (kbd "C-+") 'text-scale-increase)
      (global-set-key (kbd "C--") 'text-scale-decrease)
      (global-set-key (kbd "C-w") 'backward-kill-word)
      (global-set-key [f11] 'toggle-frame-fullscreen)
      (global-set-key [f12] 'indent-buffer)
      (global-set-key (kbd "C-c C-s") 'ispell-word)
      (global-set-key (kbd "C-x C-k") 'kill-region)
      (global-set-key (kbd "C-c C-k") 'kill-region)
      (global-set-key (kbd "C-c s") 'multi-term)
      (global-set-key (kbd "M-<up>")  'fragmad/move-line-up)
      (global-set-key (kbd "M-<down>")  'fragmad/move-line-down)
      (global-set-key (kbd "M-o") 'other-window)
      (global-set-key (kbd "C-x g") 'magit-status)
      (global-set-key (kbd "M-/") 'hippie-expand)
      (global-set-key (kbd "C-c C-m") 'smex)
      (global-set-key (kbd "C-x C-m") 'smex)
      (global-set-key [f1] (lambda ()
                             (interactive)
                             (switch-to-buffer nil)))
      (global-set-key [f2] 'other-window)
      (global-set-key [f5] (lambda ()
                           (interactive)
                           (if (and (buffer-modified-p)
                                    (not (eq 'dired-mode major-mode)))
                               (error "Buffer has unsaved changes")
                             (kill-buffer (current-buffer)))))
      (global-set-key [f8] 'neotree-toggle)
      (global-set-key [f7] 'neotree-find)
      (global-set-key [f9] 'toggle-truncate-lines)
 #+END_SRC
